<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>algorithms on Computer Vision Talks</title>
    <link>/tags/algorithms/</link>
    <description>Recent content in algorithms on Computer Vision Talks</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 04 Dec 2014 00:00:00 +0000</lastBuildDate><atom:link href="/tags/algorithms/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Tile-based image processing</title>
      <link>/post/tile-based-image-processing/</link>
      <pubDate>Thu, 04 Dec 2014 00:00:00 +0000</pubDate>
      
      <guid>/post/tile-based-image-processing/</guid>
      <description>How would you design an algorithm to process 40Mpx image? 100Mpx? What about gigapixel-sized panorams? Obviously, it should differs from those that are intended for 640x480 images. Here I want to present you implementation of the very simple but powerful approach called &amp;ldquo;Tile-based image processing&amp;rdquo;. I will show you how to make this using OpenCV.
First, let&amp;rsquo;s define a few restrictions in order to simplify our implementation. In this tutorial I will consider a &amp;lsquo;pass-through&amp;rsquo; pipeline - when we apply some function to input image and give an output image of the same size as an output.</description>
    </item>
    
    <item>
      <title>How to detect circles in noisy images</title>
      <link>/post/how-to-detect-circles-in-noisy-image/</link>
      <pubDate>Mon, 14 Jul 2014 00:00:00 +0000</pubDate>
      
      <guid>/post/how-to-detect-circles-in-noisy-image/</guid>
      <description>p | This was a request from a(href=&amp;ldquo;http://www.reddit.com/r/computervision/comments/2a1lvi/help_how_to_process_this_image_to_find_the_circles/&amp;quot;) /r/computervision. | A reddit member was asking on how to count number of eggs on quite | noisy image like you may see below. | I&amp;rsquo;ve decided to write a simple algorithm that does the job and explain how it works.
div.beforeafterimg(src=&amp;quot;source.jpg&amp;quot;,alt=&amp;quot;before&amp;quot;)img(src=&amp;quot;display.jpg&amp;quot;,alt=&amp;quot;after&amp;quot;) span.more
h2 Step 1 - Filter image
p img(src=&amp;ldquo;source.jpg&amp;rdquo;,alt=&amp;ldquo;Source image&amp;rdquo;) | The original image has noticeable color noise and therefore it must be filtered before we pass it to further stages.</description>
    </item>
    
    <item>
      <title>Integration of KAZE 1.6 in OpenCV</title>
      <link>/post/kaze-1.6-in-opencv/</link>
      <pubDate>Thu, 03 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>/post/kaze-1.6-in-opencv/</guid>
      <description>A new version of KAZE and AKAZE features is a good candidate to become a part of OpenCV. So i decided to update KAZE port i made a while ago with a new version of these features and finally make a pull request to make it a part of OpenCV.
The OpenCV has accepted my pull-request and merged KAZE port into master branch of the OpenCV library. KAZE and AKAZE features will become available in OpenCV 3.</description>
    </item>
    
    <item>
      <title>KAZE 1.5.1</title>
      <link>/post/2013-06-17-kaze-1-5-1/</link>
      <pubDate>Mon, 17 Jun 2013 00:00:00 +0000</pubDate>
      
      <guid>/post/2013-06-17-kaze-1-5-1/</guid>
      <description>A new version of KAZE features has been integrated my private fork of OpenCV (You can find it&amp;rsquo;s here: https://github.com/BloodAxe/opencv/tree/kaze-features). We&amp;rsquo;re on the way to make pull-request and integrate KAZE features to official OpenCV repository.
There only few things are left:
 Include KAZE into features2d unit tests. Rewrite KAZE to support OpenCV threading API. Expose adjustable parameters of KAZE algorithm. Do code cleanup and documentation for pull request.  I think we (Pablo, KAZE author) and me complete these steps in a near future.</description>
    </item>
    
    <item>
      <title>Porting KAZE features to OpenCV</title>
      <link>/post/2013-03-17-porting-kaze-features-to-opencv/</link>
      <pubDate>Sun, 17 Mar 2013 00:00:00 +0000</pubDate>
      
      <guid>/post/2013-03-17-porting-kaze-features-to-opencv/</guid>
      <description>Recently i came across the publications to a new features called KAZE (Japanesee work meaning &amp;ldquo;Wind&amp;rdquo;). They interested me, because KAZE authors provided very promising evalutaion results and i decided to evaluate them too using my OpenCV features comparison tool. Fortunately KAZE algorithm is based on OpenCV, so it was not too hard to wrap KAZE features implementatino to cv::Feature2D API.
Impatient readers: you can grab the most recent version of KAZE port to OpenCV here: kaze-features.</description>
    </item>
    
    <item>
      <title>Comparison of the OpenCV’s feature detection algorithms – II</title>
      <link>/post/2011-07-13-comparison-of-the-opencv-feature-detection-algorithms/</link>
      <pubDate>Wed, 13 Jul 2011 00:00:00 +0000</pubDate>
      
      <guid>/post/2011-07-13-comparison-of-the-opencv-feature-detection-algorithms/</guid>
      <description>Here is an update of half year-old post about differences between existing feature detection algorithms. Original article can be found here: Comparison of the OpenCV&amp;rsquo;s feature detection algorithms – I. I decided to update this comparison report since many things happened: OpenCV 2.3.1 has been released and the new type of feature detector (ORB feature detector) has been introduced. ORB is an acronym of Oriented-BRIEF and uses modified to compute orientation FAST detector for detection stage and BRIEF for descriptor extraction.</description>
    </item>
    
    <item>
      <title>Introduction to morphology operations on images</title>
      <link>/post/2011-02-16-introduction-to-morphology-operations-on-images/</link>
      <pubDate>Wed, 16 Feb 2011 00:00:00 +0000</pubDate>
      
      <guid>/post/2011-02-16-introduction-to-morphology-operations-on-images/</guid>
      <description>A brief tutorial/intro to the mathematical morphology in image processing.
Basic Definitions The term morphology refers to the description of the properties of shape and structure of any objects. In the context of computer vision, this term refers to the description of the properties of shapes of areas on the image. Operations of mathematical morphology were originally defined as operations on sets, but it soon became clear that they are also useful in the processing tasks of the set of points in the two-dimensional space.</description>
    </item>
    
  </channel>
</rss>
