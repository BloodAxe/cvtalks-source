<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>cloud-computing on Computer Vision Talks</title>
    <link>/tags/cloud-computing/</link>
    <description>Recent content in cloud-computing on Computer Vision Talks</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 20 May 2014 00:00:00 +0000</lastBuildDate><atom:link href="/tags/cloud-computing/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Training Haar cascade in the cloud</title>
      <link>/post/cloud-haartaining/</link>
      <pubDate>Tue, 20 May 2014 00:00:00 +0000</pubDate>
      
      <guid>/post/cloud-haartaining/</guid>
      <description>In this post I&amp;rsquo;ll show you how you can train cascade classifier with OpenCV very quickly even if you have low-end hardware using virtual machine in the cloud.
Why Clouds? Well, training a descriptor takes a lot of time. Depending on template size, number of samples and stages, it can take from several ours to a couple of days to train such cascade! Be prepared that during training stage your PC will likely be unusuable due to high RAM usage and CPU load.</description>
    </item>
    
    <item>
      <title>CloudCV - Cloud image processing platform</title>
      <link>/post/2013-09-05-cloudcv/</link>
      <pubDate>Thu, 05 Sep 2013 00:00:00 +0000</pubDate>
      
      <guid>/post/2013-09-05-cloudcv/</guid>
      <description>| Hey everyone! I continue to play with clouds and today it&#39;s time to reveal the CloudCV \- a cloud-based image processing project. | Based on my previous posts i host a server in the Digital Ocean&#39;s cloud. | I have to say, everything is working like a charm. | The cheapest 5$/month plan gives me whatever i may need for this project. | All the source-code is already sits on Github and you are more than welcome to study it.</description>
    </item>
    
    <item>
      <title>Connecting OpenCV and Node.js inside Cloud9 IDE</title>
      <link>/post/2013-08-27-connecting-opencv-and-node-js-inside-cloud9-ide/</link>
      <pubDate>Tue, 27 Aug 2013 00:00:00 +0000</pubDate>
      
      <guid>/post/2013-08-27-connecting-opencv-and-node-js-inside-cloud9-ide/</guid>
      <description>Vacation time is over, and now i&amp;rsquo;m on my way from Tartu, Estonia where i participated in 48 km. inline speedskating marathon to Odessa. My bus have Wi-Fi onboard, so i decided to write a short success-story how i managed to build a C++ addon module for Node.js and run it on the real server inside the Cloud9 IDE. You may also want to check the first tutorial since this guid relies on it.</description>
    </item>
    
    <item>
      <title>Cloud image processing using OpenCV and Node.js</title>
      <link>/post/2013-08-19-cloud-image-processing-using-opencv-and-node-js/</link>
      <pubDate>Mon, 19 Aug 2013 00:00:00 +0000</pubDate>
      
      <guid>/post/2013-08-19-cloud-image-processing-using-opencv-and-node-js/</guid>
      <description>A long time ago i was playing with cloud-based image processing. The first reason why i didn&amp;rsquo;t shared a reciple how to compile OpenCV as native app for windows azure cloud was trycky build process. It was too complicated and this tutorial will become outdated very quickly. The second one - Azure hosting wants a lot of money. So i put my research in this area on hold for better times.</description>
    </item>
    
    <item>
      <title>Image processing &amp; cloud computing - Architecture overview</title>
      <link>/post/2011-04-13-image-processing-cloud-computing-architecture-overview/</link>
      <pubDate>Wed, 13 Apr 2011 00:00:00 +0000</pubDate>
      
      <guid>/post/2011-04-13-image-processing-cloud-computing-architecture-overview/</guid>
      <description>This post will be devoted to high level architecture overview. For newcomers - I&amp;rsquo;m creating face recognition demo application that will work in the cloud environment and all algorithmic stuff will be written in native C++ code (with help of OpenCV and boost libraries). Under the hood - detailed application architecture overview and diagrams.
**FaceRecognitionCloudApp **- is a demonstration project written in combination of C++ and C# languages. It has two challenging objectives:</description>
    </item>
    
    <item>
      <title>Image processing &amp; cloud computing – choose the right Cloud</title>
      <link>/post/2011-04-05-image-processing-cloud-computing-choose-the-right-cloud/</link>
      <pubDate>Tue, 05 Apr 2011 00:00:00 +0000</pubDate>
      
      <guid>/post/2011-04-05-image-processing-cloud-computing-choose-the-right-cloud/</guid>
      <description>So as i’ve promised – here is first part of my deep dive into cloud computing. Let’s me to remind you why it does matter:
 Mobile devices has limited computation power. You cannot do heavy calculations on mobile CPU Similar situation with desktop computers – there are always a lot of heavy calculations even for quad cores Doing server-side calculations decrease complexity of the client application. If you have to support a lot of platforms it’s a killer feature Why cloud computing instead of my own server?</description>
    </item>
    
    <item>
      <title>Image processing &amp; cloud computing</title>
      <link>/post/2011-03-31-image-processing-cloud-computing/</link>
      <pubDate>Thu, 31 Mar 2011 00:00:00 +0000</pubDate>
      
      <guid>/post/2011-03-31-image-processing-cloud-computing/</guid>
      <description>It&amp;rsquo;s time to write something interesting. Today I will begin a series of articles on the development of a system of identification of human faces in the cloud. During development, I will describe the key points, details and aspects of running image processing algorithms in the cloud environment. During development face identification system will be created. It has no commercial purpose so don’t expect it will be robust enough :) I create it just for fun, so there are no time plans for this project.</description>
    </item>
    
  </channel>
</rss>
